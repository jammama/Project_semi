<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nomwork.mybatis.mapper">

 	<!-- db와 dto의 변수가 이름 다를때 맵핑해주는 기능 -->
 	<!-- USERINFO 테이블과 UserDto 맵핑 -->
	<resultMap type="UserDto" id="userinfo">
		<result property="userno" column="USERNO" />
		<result property="useremail" column="USEREMAIL" />
		<result property="userpw" column="USERPW" />
		<result property="username" column="USERNAME" />
		<result property="usergender" column="USERGENDER" />
		<result property="userenabled" column="USERENABLED" />
		<result property="userrole" column="USERROLE" />
		<result property="userurl" column="USERURL" />
	</resultMap>
	
	<!-- PROJECT 테이블과 ProjectDto 맵핑 -->
	<resultMap type="ProjectDto" id="project">
		<result property="pno" column="PROJECTNO" />
		<result property="pname" column="PROJECTNAME" />
		<result property="purl" column="PROJECTURL" />
	</resultMap>
	
	<!-- PROJECT_CREATE 테이블과 Project_CreateDto 맵핑 -->
	<resultMap type="Project_CreateDto" id="project_create">
		<result property="project_createno" column="PROJECT_CREATENO"/>
		<result property="userno" column="USERNO"/>
		<result property="projectno" column="PROJECTNO"/>
	</resultMap>
	
	<!-- CHHANEL 테이블과 ChannelDto 맵핑 -->
	<resultMap type="ChannelDto" id="channel">
		<result property="cno" column="CHANNELNO"/>
		<result property="cname" column="CHANNELNAME"/>
		<result property="cstatus" column="CHANNELSTATUS"/>
		<result property="ctime" column="CHANNELTIME"/>
	</resultMap>
	
	<!-- CHANNEL_CREATE 테이블과 Channel_CreateDto 맵핑 -->
	<resultMap type="Channel_CreateDto" id="channel_create">
		<result property="c_cno" column="CHANNEL_CREATENO"/>
		<result property="userno" column="USERNO"/>
		<result property="cno" column="CHANNELNO"/>
		<result property="pno" column="PROJECTNO"/>
	</resultMap>
	
	<!-- TEXT 테이블과 TextDto 맵핑 -->
	<resultMap type="TextDto" id="text">
		<result property="tno" column="TEXTNO"/>
		<result property="userno" column="USERNO"/>
		<result property="cno" column="CHANNELNO"/>
		<result property="answersq" column="ANSWERSQ"/>
		<result property="gno" column="GROUPNO"/>
		<result property="tcontent" column="TEXTCONTENT"/>
		<result property="tip" column="TEXTIP"/>
		<result property="ttime" column="TEXTTIME"/>
		<result property="mno" column="MAPNO"/>
		<result property="fno" column="FILENO"/>
		<result property="cvno" column="CANVASNO"/>
		<result property="vurl" column="VIDEOURL"/>
		<!-- USERINFO 테이블과 조인을 위한 변수 설정 -->
		<result property="useremail" column="USEREMAIL" />
		<result property="username" column="USERNAME" />
		<result property="userurl" column="USERURL" />
		<!-- MAPS 테이블과 조인을 위한 변수 설정 -->
		<result property="latitude" column="LATITUDE"/>
		<result property="longitude" column="LONGITUDE"/>
		<!-- FILES 테이블과 조인을 위한 변수 설정 -->
        <result property="fstream" column="FILESTREAM"/>
        <result property="ftitle" column="FILETITLE"/>
        <!-- CANVAS 테이블과 조인을 위한 변수 설정 -->
         <result property="cvurl" column="CANVASURL"/>
	</resultMap>
	
	<!-- TODO 테이블과 TodoDto 맵핑 -->
	<resultMap type="TodoDto" id="Todo">
		<result property="todono" column="TODONO" />
		<result property="projectno" column="PROJECTNO" />
		<result property="todotitle" column="TODOTITLE" />
		<result property="todocontent" column="TODOCONTENT" />
		<result property="tododate" column="TODODATE" />
		<result property="todoregdate" column="TODOREGDATE" />
	</resultMap>
	
	<!-- BOARD 테이블과 BoardDto 맵핑 -->
   	<resultMap type="BoardDto" id="board">
      <result property="bno" column="BOARDNO"/>
      <result property="userno" column="USERNO"/>
      <result property="pno" column="PROJECTNO"/>
      <result property="btitle" column="BOARDTITLE"/>
      <result property="bcontent" column="BOARDCONTENT"/>
      <result property="delflag" column="DELFLAG"/>
      <result property="regdate" column="REGDATE"/>
      <result property="mno" column="MAPNO"/>
      <result property="fno" column="FILENO"/>
      <result property="vurl" column="VIDEOURL"/>
	  <!-- USERINFO 테이블과 조인을 위한 변수 설정 -->
	  <result property="useremail" column="USEREMAIL" />
	  <result property="username" column="USERNAME" />
	  <result property="userurl" column="USERURL" />
	  <!-- MAPS 테이블과 조인을 위한 변수 설정 -->
	  <result property="latitude" column="LATITUDE"/>
	  <result property="longitude" column="LONGITUDE"/>
	  <!-- FILES 테이블과 조인을 위한 변수 설정 -->      
	  <result property="fstream" column="FILESTREAM"/>
      <result property="ftitle" column="FILETITLE"/>
   </resultMap>
   
   <!-- FILES 테이블과 FileDto 맵핑 -->
   <resultMap type="FileDto" id="file">
      <result property="fno" column="FILENO"/>
      <result property="fstream" column="FILESTREAM"/>
      <result property="ftitle" column="FILETITLE"/>
   </resultMap>
	
	<!-- MAPS 테이블과 MapDto 맵핑 -->
	<resultMap type="MapDto" id="map">
		<result property="mno" column="MAPNO"/>
		<result property="latitude" column="LATITUDE"/>
		<result property="longitude" column="LONGITUDE"/>
	</resultMap>
	
	<!-- CANVAS 테이블과 CanvasDto 맵핑 -->
	<resultMap type="CanvasDto" id="canvas">
		<result property="cvno" column="CANVASNO"/>
		<result property="cvurl" column="CANVASURL"/>
	</resultMap>

	<!-- 로그인 -->
	<select id="login" parameterType="UserDto" resultMap="userinfo">
		SELECT	*
		FROM 	USERINFO
		WHERE 	USEREMAIL=#{useremail} 
		AND 	USERPW=#{userpw} 
		AND 	USERENABLED='Y'
	</select>
	
	<!-- 이메일로 회원 찾기 -->
	<select id="select_user" parameterType="String" resultMap="userinfo">
		SELECT	*
		FROM 	USERINFO
		WHERE 	USEREMAIL=#{useremail}
		AND 	USERENABLED='Y'
	</select>
	
	<!-- 프로젝트 내 유저 추가 전 중복 확인 -->
	<select id="select_channel_user_overlaped" parameterType="Project_CreateDto" resultType="int">
		SELECT	COUNT(USERNO)
		FROM 	PROJECT A INNER JOIN PROJECT_CREATE B
		ON		A.PROJECTNO = B.PROJECTNO
		WHERE 	B.USERNO= #{userno}
		AND 	A.PROJECTNO = #{pno}
	</select>
	
	<!-- API 로그인시, 고유번호 찾기 -->
	<select id="select_user_by_api" parameterType="Double" resultMap="userinfo">
		SELECT	*
		FROM 	USERINFO
		WHERE 	USERNO=#{userno}
	</select>
	
	<!-- 검색 유저의 프로젝트 중 가장 번호가 작은 프로젝트 검색 -->
	<select id="select_project_default" parameterType="UserDto" resultMap="project">
	
		SELECT  A.*
		FROM    (
            SELECT  *
            FROM    PROJECT
            ORDER BY PROJECTNO) A 
        INNER JOIN PROJECT_CREATE B
		ON      A.PROJECTNO = B.PROJECTNO
		INNER JOIN  USERINFO C
		ON      B.USERNO = C.USERNO
		WHERE   C.USERNO = #{userno}
		AND     ROWNUM = 1
	
	</select>
	
	<!-- 검색 유저의 프로젝트 목록 조회 -->
	<select id="select_project_list" parameterType="UserDto" resultMap="project">
	
		SELECT  B.*
		FROM    PROJECT_CREATE A INNER JOIN PROJECT B
		ON      A.PROJECTNO = B.PROJECTNO
		WHERE   USERNO = #{userno}
		
	</select>
	
	<!-- 프로젝트에 속한 유저 조회 -->	
	<select id="select_project_user_list" parameterType="ProjectDto" resultMap="userinfo">
		
		SELECT	B.*
		FROM	PROJECT_CREATE A INNER JOIN USERINFO B
		ON		A.USERNO = B.USERNO
		WHERE	PROJECTNO = #{pno}
		
	</select>
	
	<!-- URL을 통한 프로젝트 검색 -->	
	<select id="select_project_by_url" parameterType="String" resultMap="project">
		
		SELECT	*
		FROM	PROJECT
		WHERE	PROJECTURL = #{purl}
		
	</select>
	
	<!-- PNO을 통한 프로젝트 메인 채널 검색 -->	
	<select id="select_channel_main" parameterType="int" resultMap="channel">
		
		SELECT	C.*
		FROM	PROJECT A INNER  JOIN CHANNEL_CREATE B
        ON      A.PROJECTNO = B.PROJECTNO
                INNER JOIN CHANNEL C
        ON      B.CHANNELNO = C.CHANNELNO
		WHERE	A.PROJECTNO = #{pno}
        AND     C.CHANNELNAME = 'MAIN'
		
	</select>
	
	<!-- 채널 번호를 통한 채널 검색 -->
	<select id="select_channel" parameterType="int" resultMap="channel">
		SELECT  *
		FROM    CHANNEL
		WHERE   CHANNELNO = #{cno}
	</select>
	
	<!-- 검색 유저, 프로젝트에 속한 채널 조회 -->
	<select id="select_channel_list" parameterType="Channel_CreateDto" resultMap="channel">
		SELECT  A.*
		FROM    CHANNEL A INNER JOIN CHANNEL_CREATE B
		ON      A.CHANNELNO = B.CHANNELNO
		WHERE   B.USERNO = #{userno}
		AND		B.PROJECTNO = #{pno}
	</select>
	
	<!-- 검색 채널에 속한 유저 조회 -->
	<select id="select_channel_user_list" parameterType="ChannelDto" resultMap="userinfo">
	SELECT  C.*
	FROM    CHANNEL A INNER JOIN CHANNEL_CREATE B
	ON      A.CHANNELNO = B.CHANNELNO
    		INNER JOIN USERINFO C
	ON      B.USERNO = C.USERNO
	WHERE   A.CHANNELNO = #{cno}
	</select>
	
	<!-- 맵 객체 조회 -->
	<select id="select_map" parameterType="MapDto" resultMap="map">
	
		SELECT * FROM MAPS WHERE #{mno}
		
	</select>
	
	<!-- 캔버스 객체 조회 -->
	<select id="selectone_canvas" parameterType="CanvasDto" resultMap="canvas">
		SELECT 	* 
		FROM 	CANVAS 
		WHERE 	CANVASNO = #{cvno}
	</select>
	
	<!-- 텍스트 목록 조회 -->
	<select id="select_text_list" parameterType="TextDto" resultMap="text">
	
		SELECT  A.*
        		,B.USEREMAIL, B.USERNAME, B.USERURL
        		,C.LATITUDE, C.LONGITUDE
        		,D.FILETITLE, D.FILESTREAM
        		,E.CANVASURL
		FROM    TEXT A INNER JOIN USERINFO B
		ON      A.USERNO = B.USERNO
        		LEFT OUTER JOIN MAPS C
		ON      A.MAPNO = C.MAPNO
				LEFT OUTER JOIN FILES D
		ON 		A.FILENO = D.FILENO
				LEFT OUTER JOIN CANVAS E
		ON		A.CANVASNO = E.CANVASNO
		WHERE   A.CHANNELNO = #{cno}
		AND A.ANSWERSQ = 0
		ORDER BY A.TEXTNO
		
	</select>
	
	<!-- 텍스트 답글 조회 -->
	<select id="select_text_answer" resultMap="text" parameterType="int">
		SELECT 	A.*
				,B.USERNAME, B.USEREMAIL, B.USERURL 
		FROM 	TEXT A JOIN USERINFO B
		ON 		A.USERNO = B.USERNO 
		WHERE 	A.GROUPNO = (
							SELECT 	GROUPNO 
							FROM 	TEXT 
							WHERE 	TEXTNO = #{textno}) 
		ORDER BY A.ANSWERSQ
	</select>
	
	<!-- 가장 최신 텍스트 조회 -->
	<select id="select_last_text" resultType="int">
   		SELECT 	MAX(textno)+1 
   		FROM 	TEXT 
   		WHERE 	ANSWERSQ = 0
	</select>
   
   <!-- 게시판 페이지 번호 출력 -->
   <select id="select_board_count" parameterType="int" resultType="int">
   
      SELECT 	COUNT(BOARDNO) FNO 
      FROM 		BOARD 
      WHERE 	PROJECTNO = #{pno}
      AND		DELFLAG = 'N'
      
   </select>
   
   <!-- 게시판 내 게시물 10개 조회 -->
   <select id="select_board_list" resultMap="board" parameterType="BoardDto">
	SELECT 	A.*
            ,B.USERNAME, B.USEREMAIL, B.USERURL
            ,C.FILESTREAM, C.FILETITLE
            ,D.LONGITUDE, D.LATITUDE
	FROM 	(
			SELECT 	ROWNUM AS rn, BOARDNO, USERNO, BOARDTITLE
					,BOARDCONTENT, REGDATE, MAPNO, FILENO 
			FROM 	BOARD 
			WHERE 	DELFLAG = 'N' 
			AND 	PROJECTNO = #{pno}
			ORDER BY BOARDNO) A INNER JOIN USERINFO B
	ON      A.USERNO = B.USERNO
        	LEFT OUTER JOIN FILES C
	ON      A.FILENO = C.FILENO
        	LEFT OUTER JOIN MAPS D
	ON      A.MAPNO = D.MAPNO    
	WHERE 	rn BETWEEN (
						SELECT 	GREATEST(MAX(rn)-(#{bno}*10)+1,1) 
						FROM 	(
								SELECT 	ROWNUM as rn 
								FROM 	BOARD 
								WHERE 	DELFLAG = 'N' 
								AND 	PROJECTNO = #{pno})) 
	AND 	(
			SELECT 	MAX(rn)-(#{bno}-1)*10 
			FROM 	(
					SELECT 	ROWNUM as rn 
					FROM 	BOARD 
					WHERE 	DELFLAG = 'N' 
					AND 	PROJECTNO = #{pno}))
	ORDER BY rn DESC
   </select>
   
   <!-- 게시판 내 게시물 10개 검색 -->
   <select id="select_board_searched_list" resultMap="board" parameterType="BoardDto">
	SELECT 	A.*
            ,B.USERNAME, B.USEREMAIL, B.USERURL
            ,C.FILESTREAM, C.FILETITLE
            ,D.LONGITUDE, D.LATITUDE
	FROM 	(
			SELECT 	ROWNUM AS rn, BOARDNO, USERNO, BOARDTITLE
					,BOARDCONTENT, REGDATE, MAPNO, FILENO 
			FROM 	BOARD 
			WHERE 	DELFLAG = 'N' 
			AND 	PROJECTNO = #{pno}
			AND 	BOARDCONTENT LIKE #{bcontent} 
			ORDER BY BOARDNO) A INNER JOIN USERINFO B
	ON      A.USERNO = B.USERNO
        	LEFT OUTER JOIN FILES C
	ON      A.FILENO = C.FILENO
        	LEFT OUTER JOIN MAPS D
	ON      A.MAPNO = D.MAPNO    
	WHERE 	rn BETWEEN (
						SELECT 	GREATEST(MAX(rn)-(#{bno}*10)+1,1) 
						FROM 	(
								SELECT 	ROWNUM as rn 
								FROM 	BOARD 
								WHERE 	DELFLAG = 'N' 
								AND 	BOARDCONTENT LIKE #{bcontent} 
								AND 	PROJECTNO = #{pno})) 
	AND 	(
			SELECT 	MAX(rn)-(#{bno}-1)*10 
			FROM 	(
					SELECT 	ROWNUM as rn 
					FROM 	BOARD 
					WHERE 	DELFLAG = 'N' 
					AND 	PROJECTNO = #{pno}
					AND 	BOARDCONTENT LIKE #{bcontent} ))
	ORDER BY rn DESC
   </select>
   
   <!-- 게시물 1개 출력 -->
   <select id="select_board" parameterType="int" resultMap="board">   
		SELECT 	A.*
		        ,B.USERNAME, B.USEREMAIL, B.USERURL
		        ,C.FILESTREAM, C.FILETITLE
		        ,D.LONGITUDE, D.LATITUDE
		FROM 	BOARD A INNER JOIN USERINFO B
		ON      A.USERNO = B.USERNO
		        LEFT OUTER JOIN FILES C
		ON      A.FILENO = C.FILENO
		        LEFT OUTER JOIN MAPS D
		ON      A.MAPNO = D.MAPNO
		WHERE 	A.DELFLAG='N' 
		AND 	A.BOARDNO = #{bno}
   </select>   
   
   <!-- 가장 최신에 업데이트 된 파일 선택 -->
   <select id="select_recent_file" resultType="int">
      SELECT 	MAX(FILENO) 
      FROM 		FILES
   </select>
   
   <select id="select_file" resultType="FileDto">
      SELECT 	FILETITLE 
      FROM 		FILES 
      WHERE 	FILENO = #{fileno}
   </select>
	
	<!-- 회원 정보 수정 -->
	<update id="update_userinfo" parameterType="UserDto">
		UPDATE 	USERINFO
		SET 	USEREMAIL=#{useremail}
				,USERPW=#{userpw}
				,USERNAME=#{username}
				,USERGENDER=#{usergender}
				,USERURL=#{userurl}
		WHERE 	USERNO=#{userno}
	</update>
	
	<!-- 회원 탈퇴 -->
	<update id="update_user_enabled" parameterType="Double">
		UPDATE 	USERINFO
		SET 	USERENABLED='N'
		WHERE 	USERNO=#{userno}
	</update>
	
	<!-- 회원가입 -->
	<insert id="insert_user" parameterType="UserDto">
		INSERT INTO USERINFO(USERNO,USEREMAIL ,USERPW ,USERNAME ,USERGENDER ,USERENABLED ,USERROLE ,USERURL)
		VALUES( 
		<choose>
 			<when test="userno != null">
 				#{userno}
 			</when>
 			<otherwise>
 				USERNOSEQ.NEXTVAL
 			</otherwise>
 		</choose>
		,#{useremail}
		,#{userpw} 
		,#{username}
		<!-- API를 통한 회원가입시 성별을 NULL로 설정한다. -->
		<choose>
 			<when test="usergender != null">
 				,#{usergender}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
		,'Y'
		,'2'
		<choose>
 			<when test="userurl != null">
 				,#{userurl}
 			</when>
 			<otherwise>
 				,'resources/image/profile/basic.jpg'
 			</otherwise>
 		</choose>
		)
	</insert>
	
	<!-- 프로젝트 테이블 생성 -->
	<insert id="insert_project" parameterType="ProjectDto">

  		INSERT INTO PROJECT
		VALUES(
				PROJECTNOSEQ.NEXTVAL
				,#{pname}
				,#{purl}
		)
		<selectKey keyProperty="pno" resultType="int" order="AFTER">
   			SELECT PROJECTNOSEQ.CURRVAL FROM DUAL
  		</selectKey>
  		
				
	</insert>
	
	<!-- 프로젝트 참여 테이블 생성 -->
	<insert id="insert_project_create" parameterType="Project_CreateDto">

 		INSERT INTO PROJECT_CREATE 
 		VALUES( 
 				PROJECT_CREATENOSEQ.NEXTVAL
 				,#{userno}
 				,#{pno}
 				)
				
	</insert>
	
	<!-- 채널 테이블 생성 -->
	<insert id="insert_channel" parameterType="ChannelDto">

 		INSERT INTO CHANNEL
 		VALUES( 
 				CHANNELNOSEQ.NEXTVAL
 				
 		<!-- MyBatis 동적쿼리 IF문 사용방법
 		
 		EX) 잘못된 예
 		<if test="#{cname} != null"></if>
 		
 		EX) 같은 문자를 비교하는 방법
 		1. <if test="cname != null and (cname eq "test".toString())"> </if>
 		2. <if test="cname != null and cname.equals("test")></if>
 		EX) 대소문자 관계없이 비교하는 방법
 		3. <if test="cname != null and cname.equalsIgnoreCase("test")"></if>
 		비교할 스트링 값을 "" (double quote)로 묶어주는게 좋다.
 		 -->
 		<choose>
 			<when test="cname != null">
 				,#{cname}
 			</when>
 			<otherwise>
 				,'MAIN'
 			</otherwise>
 		</choose>
 		 		,SYSDATE
 				,'OFF'
 				)
 		
 		<selectKey  keyProperty="cno" resultType="int" order="AFTER">
   			SELECT 	CHANNELNOSEQ.CURRVAL
   			FROM	DUAL
  		</selectKey>
				
	</insert>
	
	<!-- 채널 참여 테이블 생성 -->
	<insert id="insert_channel_create" parameterType="Channel_CreateDto">

 		INSERT INTO CHANNEL_CREATE
 		VALUES( 
 				CHANNEL_CREATENOSEQ.NEXTVAL
 				,#{userno}
 				,#{cno}
 				,#{pno}
 				)
				
	</insert>
	
	<!-- 맵 테이블 생성 -->
	<insert id="insert_map" parameterType="MapDto">
	
		INSERT INTO MAPS
		VALUES(
			MAPNOSEQ.NEXTVAL,
			#{latitude},
			#{longitude}
		)
		
		<selectKey  keyProperty="mno" resultType="int" order="AFTER">
   			SELECT 	MAPNOSEQ.CURRVAL
   			FROM	DUAL
  		</selectKey>
		
	</insert>
	
	<!-- 캔버스 테이블 생성 -->
	<insert id="insert_canvas" parameterType="CanvasDto">
		
		INSERT INTO CANVAS
		VALUES(
			CANVASNOSEQ.NEXTVAL
			<choose>
 			<when test="cvurl != null">
 				,#{cvurl}
 			</when>
 			<otherwise>
 				,'null'
 			</otherwise>
 		</choose>
		)
		
		<selectKey  keyProperty="cvno" resultType="int" order="AFTER">
   			SELECT 	CANVASNOSEQ.CURRVAL
   			FROM	DUAL
  		</selectKey>
		
	</insert>
	
	<!-- 텍스트 테이블 생성 -->
	<insert id="insert_text">
	
		<selectKey  keyProperty="tno" resultType="int" order="BEFORE">
   			SELECT 	TEXTNOSEQ.NEXTVAL
   			FROM	DUAL
  		</selectKey>

	
		INSERT INTO TEXT(TEXTNO, GROUPNO, USERNO, CHANNELNO, ANSWERSQ, TEXTCONTENT, TEXTTIME, MAPNO, FILENO, CANVASNO, VIDEOURL)
		VALUES (
			#{tno}
			,GROUPNOSEQ.NEXTVAL
			,#{userno}
			,#{cno}
		<choose>
 			<when test="answersq != 0">
 				,#{answersq}
 			</when>
 			<otherwise>
 				,0
 			</otherwise>
 		</choose>
 		<choose>
 			<when test="tcontent != null">
 				,#{tcontent}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		,SYSDATE
 		<choose>
 			<when test="mno != 0">
 				,#{mno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		<choose>
 			<when test="fno != 0">
 				,#{fno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		<choose>
 			<when test="cvno != 0">
 				,#{cvno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		 <choose>
 			<when test="vurl != null">
 				,#{vurl}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
		)		
	
	</insert>
	
	<!-- 텍스트 답글 입력 -->
	<insert id="insert_text_answer">
	
		INSERT INTO TEXT(TEXTNO, GROUPNO, USERNO, CHANNELNO, ANSWERSQ, TEXTCONTENT, TEXTTIME, MAPNO, FILENO)
		VALUES (
			TEXTNOSEQ.NEXTVAL
			,(SELECT GROUPNO FROM TEXT WHERE TEXTNO = #{tno})
			,#{userno}
			,#{cno}
			,(SELECT MAX(ANSWERSQ)+1 FROM TEXT WHERE GROUPNO = (SELECT GROUPNO FROM TEXT WHERE TEXTNO = #{tno}))
 		<choose>
 			<when test="tcontent != null">
 				,#{tcontent}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		,SYSDATE
 		<choose>
 			<when test="mno != 0">
 				,#{mno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		<choose>
 			<when test="fno != 0">
 				,#{fno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
		)		
	
	</insert>
	
   <!-- 파일정보 입력 -->
   <insert id="insert_file" parameterType="FileDto">
      INSERT INTO FILES 
      VALUES(
      		FILENOSEQ.NEXTVAL
      		,#{fstream}
      		,#{ftitle})
      		
		<selectKey  keyProperty="fno" resultType="int" order="AFTER">
   			SELECT 	FILENOSEQ.CURRVAL
   			FROM	DUAL
  		</selectKey>
   </insert>
   
      <!-- 게시물 입력 -->
   <insert id="insert_board" parameterType="BoardDto">
      INSERT INTO BOARD 
      VALUES(
      		BOARDNOSEQ.NEXTVAL
      		,#{userno}
      		,#{pno}
      		,#{btitle}
      		,#{bcontent}
      		,'N'
      		,SYSDATE
 		<choose>
 			<when test="mno != 0">
 				,#{mno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		<choose>
 			<when test="fno != 0">
 				,#{fno}
 			</when>
 			<otherwise>
 				,NULL
 			</otherwise>
 		</choose>
 		)
   </insert>
   
   <!-- 게시물 삭제 -->
   <update id="delete_board_multi" parameterType="map">
   
      UPDATE 	BOARD 
      SET 		DELFLAG = 'Y' 
      WHERE 	BOARDNO IN 
      <foreach collection="bnos" item="bno" open="(" separator="," close=")">#{bno}
      </foreach>
      
   </update>

	<!-- 캘린더에 일정뿌림 -->
	<select id="select_todo_view_list" resultType="TodoDto" parameterType="map" >
		SELECT 	*
		FROM 	(
				SELECT (ROW_NUMBER() OVER(PARTITION BY SUBSTR(TODODATE,1,8) ORDER BY TODODATE)) RN,
				TODONO, PROJECTNO, TODOTITLE, TODOCONTENT, TODODATE, TODOREGDATE
		FROM 	TODO 
		WHERE 	PROJECTNO = #{projectno} 
		AND 	SUBSTR(TODODATE,1,6) = #{tododate})
		WHERE 	RN BETWEEN 1 AND 3
	</select>
	
	<!-- 일정 목록보기 -->
	<select id="select_todo_list" resultType="TodoDto" parameterType="map" >
		SELECT 	* 
		FROM 	TODO 
		WHERE 	PROJECTNO = #{projectno} 
		AND 	SUBSTR(TODODATE,1,8) = #{tododate}
		ORDER BY TODODATE
	</select>
	
	<!-- 일정 상세보기 -->
	<select id="select_todo" parameterType="String" resultMap="Todo">
		 SELECT  * 
		 FROM 	TODO 
		 WHERE 	TODODATE = #{tododate}
	</select>
	
	<!-- 일정 추가 -->
	<insert id="insert_todo" parameterType="TodoDto">
		INSERT INTO TODO
		VALUES(
				TODOSEQ.NEXTVAL
				,#{projectno}
				,#{todotitle}
				,#{todocontent}
				,#{tododate}
				,SYSDATE)
	</insert>
	
	<!-- 일정 삭제 -->
	<delete id="delete_todo_multi" parameterType="map" >
		DELETE FROM TODO WHERE TODONO IN
		<foreach collection="todonos" item="todono" open="(" separator="," close=")">
			#{todono}
		</foreach>
	</delete>
	
	<!-- 게시판과 연동 -->
	<insert id="chattoboard" parameterType="int">
		INSERT INTO BOARD(BOARDNO, USERNO, PROJECTNO, BOARDTITLE, BOARDCONTENT ,DELFLAG,REGDATE, MAPNO, FILENO)
				VALUES(
				    BOARDNOSEQ.NEXTVAL
				    ,(SELECT USERNO FROM TEXT WHERE TEXTNO = #{textno})
				    ,(SELECT MAX(PROJECTNO) FROM CHANNEL_CREATE WHERE CHANNELNO = (SELECT CHANNELNO FROM TEXT WHERE TEXTNO = #{textno}))
				    ,(SELECT SUBSTR(TEXTCONTENT,1,13) FROM TEXT WHERE TEXTNO = #{textno})
				    ,(SELECT TEXTCONTENT FROM TEXT WHERE TEXTNO = #{textno})
				    ,'N'
				    ,SYSDATE
				    ,null
				    ,null)
	</insert>
</mapper>
